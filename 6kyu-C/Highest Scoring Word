/*
Given a string of words, you need to find the highest scoring word.

Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.

You need to return the highest scoring word as a string.

If two words score the same, return the word that appears earliest in the original string.

All letters will be lowercase and all inputs will be valid.
*/
/*
** @param str: a C-string containing only lowercase letters and spaces (' ')
** @return:    a C-string allocated on the heap containing the highest scoring word of str
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char  *highestScoringWord(const char *str)
{
  int n, sum = 0, mum = 0;
  char c;
  int l = strlen(str);
  char* text = malloc(l * sizeof(char*));
  char* mext = malloc(l * sizeof(char*));
  char* res = malloc(l * sizeof(char*));
  while (*str) {
    sscanf(str, "%s %n", text, &n);
    while (*text) {
      sscanf(text, "%c %n", &c, &n);
      text += n;
      sum += (int)c - 96;
    }
    if (sum > mum) {
      sscanf(str, "%s %n", mext, &n);
      mum = sum;
    }
    sscanf(str, "%s %n", text, &n);
    str += n;
    sum = 0;
  }
  sprintf(res, "%s", mext);
  return res;
}
